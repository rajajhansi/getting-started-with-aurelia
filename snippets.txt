1-helloworld
npm install -g aurelia-cli
au new 1-helloworld
cd 1-helloworld
au run --watch

2-component
au new 2-component

todo.ts
export class Todo {
    constructor(private done: boolean, private description: string) {}
}

app.ts
import {Todo} from "./todo";

export class App {  
  todos: Todo[] = [
    new Todo(false, "Task 1"),
    new Todo(false, "Task 2")
  ];
}
app.html
<template>  
  <ul>
    <li repeat.for="todo of todos">
      <input type="checkbox" checked.bind="todo.done">
      <span>${todo.description}</span>      
    </li>
  </ul>
</template>


3-events
au new 3-events
app.ts
heading: string = "Todos";
todoDescription: string = "";

addTodo() {
    
	if(this.todoDescription) {
		this.todos.push(new Todo(false, this.todoDescription));
		this.todoDescription = "";
	}
}

removeTodo(todo) {
	let index = this.todos.indexOf(todo);
	if(index !== -1) {
		this.todos.splice(index, 1);
	}
}

app.html
<h1>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form> 

  <button click.trigger="removeTodo(todo)">Remove Todo</button>

4-class-style-binding
au new 4-class-style-binding

index.html
<style>
  body { font-family: Verdana, Arial; }
  .strikeout { text-decoration: line-through; }
  ul { padding-left: 0px; }
  li { list-style-type: none; } 
</style>

app.html
<span class.bind="t.done ? 'strikeout': ''">${t.description}</span>


app.ts
styleString: string = 'text-decoration: line-through;';
styleObject: any = {
'text-decoration': 'line-through'
};

app.html
<span style.bind="t.done ? styleString : ''">${t.description}</span>
<span css.bind="t.done ? styleString : ''">${t.description}</span>
<span style.bind="t.done ? ${styleObject}: ''">${t.description}</span>
<span css.bind="t.done ? ${styleObject}: ''">${t.description}</span>
<span css="text-decoration: ${t.done ? 'line-through': ''}">${t.description}</span>

5-binding-templating-composition
au new 5-binding-templating-composition

todo.ts
export class Todo {
    constructor(private done: boolean, private description: string){}
    activate(model: Todo) {
        this.done = model.done;
        this.description = model.description;
    }
}

todo.html
<template>
    <input type="checkbox" checked.bind="done">
    <span css="text-decoration: ${done ? 'line-through' : ''}">${description}</span>
</template>

todo-upper.html
<template>
    <input type="checkbox" checked.bind="done">
    <span css="text-decoration: ${done ? 'line-through' : ''}">${description.toUpperCase() }</span>
</template>

app.html notes: using view in <compose> is optional if a view with the same name as viewmodel (with .html extension) is defined. You can use another view by
providing the path to the .html file as the value of "view" attribute.

app.html
<template>  
  <h1>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <compose view-model="todo" view="todo-upper.html"  model.bind="t"></compose>
      <button click.trigger="removeTodo(t)">Remove Todo</button>
    </li>
  </ul>
</template>

6-custom-attribute
au new 6-custom-attribute
au generate attribute upper-case
upper-case.ts
import {autoinject} from 'aurelia-framework';

@autoinject()
export class UpperCaseCustomAttribute {
  constructor(private element: Element) {
    this.element.style.textTransform = "uppercase";
    this.element.style.backgroundColor = "red";
  }

  valueChanged(newValue, oldValue) {

  }
}

app.html
<template>
  <require from="./resources/attributes/upper-case"></require>
  <h1 upper-case>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <compose view-model="todo" view="todo.html" model.bind="t" upper-case></compose>
      <button click.trigger="removeTodo(t)">Remove Todo</button>
    </li>
  </ul>
</template>

7-custom-attribute-single-value-binding
case.ts
import {autoinject} from 'aurelia-framework';

@autoinject()
export class CaseCustomAttribute {
  constructor(private element: Element) { }

  valueChanged(newValue, oldValue) {
    this.element.style.textTransform = newValue;
  }
}

app.html
<template>
  <require from="./resources/attributes/upper-case"></require>
  <require from="./resources/attributes/case"></require>
  <h1 case"uppercase">${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <compose view-model="todo" view="todo.html" model.bind="t" case="${$odd ? 'uppercase' : 'lowercase'}"></compose>
      <button click.trigger="removeTodo(t)">Remove Todo</button>
    </li>
  </ul>
</template>

8-custom-attribute-options-binding
case-color.ts
import {bindable, autoinject} from 'aurelia-framework';

@autoinject()
export class CaseColorCustomAttribute {
  @bindable case : string;
  @bindable color : string;
  constructor(private element: Element) { }

  caseChanged(newCase: string, oldCase: string) {
    this.element.style.textTransform = newCase;
  }

  colorChanged(newColor: string, oldColor: string) {
    this.element.style.color = newColor;
  }
}

app.ts
import {Todo} from "./todo";

export class App {
  heading = 'Todos';
  todos: Todo[] = [
    new Todo(false, "Task 1"),
    new Todo(true, "Task 2")
  ]
  todoDescription: string;
  styleString: string = 'text-decoration: line-through;';
  styleObject: any = {
    'text-decoration': 'line-through'
  };

  oddItemCase: string = "uppercase";
  oddItemColor: string = "red";
  evenItemCase: string = "lowercase";
  evenItemColor: string = "green";
  addTodo() {
    if(this.todoDescription) {
      this.todos.push(new Todo(false, this.todoDescription));
      this.todoDescription = "";
    }
  }

  removeTodo(todo: Todo) {
    let index = this.todos.indexOf(todo);
    if(index !== -1) {
      this.todos.splice(index, 1);
    } 
  }
}

app.html
<template>
  <require from="./resources/attributes/upper-case"></require>
  <require from="./resources/attributes/case"></require>
  <require from="./resources/attributes/case-color"></require>
  <h1>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <compose if.bind="$odd" view-model="todo" view="todo.html" model.bind="t" case-color="case.bind: oddItemCase; color.bind: oddItemColor"></compose>
      <compose if.bind="$even" view-model="todo" view="todo.html" model.bind="t" case-color="case.bind: evenItemCase; color.bind: evenItemColor"></compose>
      <button click.trigger="removeTodo(t)">Remove Todo</button>
    </li>
  </ul>
</template>

9-custom-attribute-dynamic-options-binding
dynamic-style.ts
import {dynamicOptions, autoinject} from 'aurelia-framework';

@dynamicOptions
@autoinject()
export class DynamicStyleCustomAttribute {
  constructor(private element: Element) { }

  propertyChanged(name: string, newValue: string, oldValue: string) {
    switch(name) {
      case "case":
        this.element.style.textTransform = newValue;
        break;
      case "color":
        this.element.style.color = newValue;
        break;
      case "style":
        this.element.style.fontStyle = newValue;
        break;
      default:
        this.element.style[`${name}`] = newValue;
        break;
    }
  }
}

app.ts
  oddItemStyle: string = "oblique";
  oddItemWeight: string = "bold";
  
  evenItemStyle: string = "italic";
  evenItemWeight: string = "lighter";

10-creating-html-only-custom-element
au new 10-creating-html-only-custom-element
au generate element todo

todo-hoce.html
<template bindable="done, description">
  <input type="checkbox" checked.bind="done">
  <span css="text-decoration: ${ done ? 'line-through' : '' }">${description}</span>
</template>

app.html
<require from="./todo-hoce.html"></require>

<todo-hoce done.bind="t.done" description.bind="t.description"></todo-hoce>

todo.ts
@bindable private done: boolean;
@bindable private description: string
constructor(done: boolean, description: string){
        this.done = done;
        this.description = description;
    }

app.html
<require from="./todo"></require>

<todo></todo>

11-creating-custom-element-with-bindable-properties
au new 11-creating-custom-element-with-bindable-properties

todo.ts
import {bindable, customElement} from "aurelia-framework";

@customElement("raja-todo")
export class TodoCustomElement {
    @bindable private done: boolean;
    @bindable private description: string;
    constructor(done: boolean, description: string){
        this.done = done;
        this.description = description;
    }
    activate(model: TodoCustomElement) {
        this.done = model.done;
        this.description = model.description;
    }
}

todo.html
<template>
    <input type="checkbox" checked.bind="done">
    <span css="text-decoration: ${done ? 'line-through' : ''}">${description}</span>
</template>

app.ts
import {TodoCustomElement} from "./todo";

export class App {
  heading = 'Todos';
  todos: TodoCustomElement[] = [
    new TodoCustomElement(false, "Task 1"),
    new TodoCustomElement(true, "Task 2")
  ]
  todoDescription: string;
  styleString: string = 'text-decoration: line-through;';
  styleObject: any = {
    'text-decoration': 'line-through'
  };
  oddItemCase: string = "uppercase";
  oddItemColor: string = "red";
  oddItemStyle: string = "oblique";
  oddItemWeight: string = "bold";
  evenItemCase: string = "lowercase";
  evenItemColor: string = "green";
  evenItemStyle: string = "italic";
  evenItemWeight: string = "lighter";
  addTodo() {
    if(this.todoDescription) {
      this.todos.push(new TodoCustomElement(false, this.todoDescription));
      this.todoDescription = "";
    }
  }

  removeTodo(todo: TodoCustomElement) {
    let index = this.todos.indexOf(todo);
    if(index !== -1) {
      this.todos.splice(index, 1);
    } 
  }
}

app.html
<template>
  <require from="./todo"></require>
  <h1 upper-case>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <raja-todo done.bind="t.done" description.bind="t.description"></raja-todo>
      <!--<compose if.bind="$odd" view-model="todo" view="todo.html" model.bind="t" dynamic-style="case.bind: oddItemCase; color.bind: oddItemColor; style.bind: oddItemStyle; fontWeight.bind: oddItemWeight"></compose>
      <compose if.bind="$even" view-model="todo" view="todo.html" model.bind="t" dynamic-style="case.bind: evenItemCase; color.bind: evenItemColor; style.bind: evenItemStyle; fontWeight.bind: evenItemWeight"></compose>-->
      <button click.trigger="removeTodo(t)">Remove Todo</button>
    </li>
  </ul>
</template>

12-filtering-and-styling
au new 12-filtering-and-styling
index.html<!DOCTYPE html>
<html>
  <head>
    <title>Aurelia</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/semantic-ui/2.2.6/semantic.min.css">
    <!--<script
      src="https://code.jquery.com/jquery-3.1.1.min.js"
      integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8="
      crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/semantic-ui/2.2.6/semantic.min.js"></script>-->
  </head>
  <style>
    body { font-family: Verdana, Arial; }
    .strikeout { text-decoration: line-through; }
    ul { padding-left: 0px; }
    li:only-of-type { list-style-type: none; } 
  </style>
  <body aurelia-app="main">
    <script src="scripts\vendor-bundle.js" data-main="aurelia-bootstrapper"></script>
    
  </body>
</html>

move todo.ts and tod0.html into resources/elements

resources/elements/todo.ts
import {bindable, bindingMode, customElement} from "aurelia-framework";

@customElement("raja-todo")
export class TodoCustomElement {
    @bindable({ defaultBindingMode: bindingMode.twoWay })  done: boolean;
    @bindable({ defaultBindingMode: bindingMode.twoWay })  description: string;
    constructor(done: boolean, description: string){
        this.done = done;
        this.description = description;
    }

    doneChanged(newDone, oldDone) {
        console.log(`done changed to ${newDone}`);
    }
    activate(model: TodoCustomElement) {
        this.done = model.done;
        this.description = model.description;
    }
}

resources/elements/todo.html
<template>
    <i class="large tasks middle aligned icon"></i>
    <div class="ui toggle checkbox">
    <input type="checkbox" checked.bind="done">
    <label><span css="text-decoration: ${done ? 'line-through' : ''}">${description}</span></label>
    </div>
</template>

resources/index.ts
import {FrameworkConfiguration} from 'aurelia-framework';

export function configure(config: FrameworkConfiguration) {
  config.globalResources([
    "./attributes/case",
    "./attributes/case-color",
    "./attributes/upper-case",
    "./attributes/dynamic-style",
    "./attributes/auto-focus",
    "./elements/todo-hoce.html"
  ]);
}


services/todo-service.ts
import { Todo } from "../todo";
export type filterEnum = "all" | "active" | "completed";

export class TodoService {
  lastId: number = 0;
  todos: Todo[] = [];

  constructor() { }

  getAllTodos(): Todo[] {
    return this.todos;
  }

  getTodoById(id: number): Todo {
    return this.todos.filter(todo => todo.id === id).pop();
  }

  addTodo(todo: Todo) : TodoService {
    if(!todo.id) {
      todo.id = ++this.lastId;
    }
    this.todos.push(todo);
    return this;
  }

  deleteTodoById(id: number) : TodoService {
    this.todos = this.todos.filter(todo => todo.id !== id);
    return this;
  }

  updateTodoById(id: number, values: Object = {}): Todo {
    let todo = this.getTodoById(id);
    if(!todo) {
      return null;
    }
    Object.assign(todo, values);
    return todo;
  }

  toggleTodoDone(todo: Todo): Todo {
    let updatedTodo = this.updateTodoById(todo.id, { done: !todo.done });
    return updatedTodo;
  }

  filterTodos(filterCriteria: filterEnum) : Todo[] {
    switch(filterCriteria) {
      case "active":
        return this.todos.filter((t: Todo) => !t.done);
      case "completed":
        return this.todos.filter((t: Todo) => t.done);
      case "all":
      default:
        return this.todos;
    }     
  }
  
  toggleAllTodos() {
    this.todos.forEach((t: Todo) => t.done = !t.done);
  }

  completeAllTodos() {
    this.todos.forEach((t: Todo) => t.done = true);
  }

  removeAllTodos() {
    this.todos.splice(0);
  }

  removeDoneTodos() {
    this.todos = this.todos.filter((todo: Todo) => !todo.done);
  }
}


app.ts
import {Todo} from "./todo";
import {filterEnum, TodoService} from "./services/todo-service";
import {autoinject} from "aurelia-framework";
import {ObserverLocator} from "aurelia-binding";

@autoinject()
export class App {
  heading = "Todos";
  filteredTodos: Todo[];
  activeFilter: filterEnum;
  todoDescription: string = "";

  styleString: string = 'text-decoration: line-through;';
  styleObject: any = {
    'text-decoration': 'line-through'
  };
  oddItemCase: string = "uppercase";
  oddItemColor: string = "red";
  oddItemStyle: string = "oblique";
  oddItemWeight: string = "bold";
  evenItemCase: string = "lowercase";
  evenItemColor: string = "green";
  evenItemStyle: string = "italic";
  evenItemWeight: string = "lighter";

  constructor(private todoService: TodoService, private observerLocator: ObserverLocator) {
    this.activeFilter = "all";
    this.filterTodos(this.activeFilter);
  }

  private getTodosCount(filter: filterEnum): number {
    return this.todoService.filterTodos(filter).length;
  }

  get allTodosCount(): number {
    return this.getTodosCount("all");
  }

  get activeTodosCount(): number {
    return this.getTodosCount("active");
  }

  get completedTodosCount(): number {
    return this.getTodosCount("completed");
  }

  addTodo() {
    if(this.todoDescription) {
      const newTodoItem = new Todo( {done: false, description: this.todoDescription});
      this.todoService.addTodo(newTodoItem);
      this.todoDescription = "";
    }
    this.filterTodos(this.activeFilter);
  }

  
  removeTodo(todo: Todo) {
    this.todoService.deleteTodoById(todo.id);
    this.filterTodos(this.activeFilter);
  }

  filterTodos(filterCriteria: filterEnum) {
    this.activeFilter = filterCriteria;
    this.filteredTodos =  this.todoService.filterTodos(this.activeFilter);
  }

  checkIfAllTodosAreCompleted() {
    return this.filteredTodos.every(todo => todo.done)
  }

  toggleAllTodos() {
    this.todoService.toggleAllTodos();
    this.filterTodos(this.activeFilter);
  }

  completeAllTodos() {
    this.todoService.completeAllTodos();
    this.checkIfAllTodosAreCompleted();
    this.filterTodos(this.activeFilter);
  }

  removeAllTodos() {
    this.todoService.removeAllTodos();
    this.filterTodos(this.activeFilter);
  }

  removeDoneTodos() {
    this.todoService.removeDoneTodos();
    this.filterTodos(this.activeFilter);
  }
}


app.html
<template>
  <require from="./resources/elements/todo"></require>
  <div class="ui raised very padded text container segment">
    <h1 upper-case>${heading}</h1>
    <div class="ui horizontal divider">New Todo</div>
    <form submit.trigger="addTodo()" class="ui form">
      <div class="field">
      <input type="text" value.bind="todoDescription" auto-focus placeholder="what needs to be done?">
      </div>
      <button type="submit" disabled.bind="todoDescription === ''" class="ui primary button">
        <i class="icon plus"></i>Add </button>
    </form>
    <div class="ui horizontal divider">Status</div>
    <div class="ui three item menu">
      <a class.bind="activeFilter === 'all' ? 'active item' : 'item'" click.trigger="filterTodos('all')" >All</a>
      <a class.bind="activeFilter === 'active' ? 'active item' : 'item'" click.trigger="filterTodos('active')">Active</a>
      <a class.bind="activeFilter === 'completed' ? 'active item' : 'item'" click.trigger="filterTodos('completed')">Completed</a>
    </div>
  
    <div class="ui floated right menu" show.bind="allTodosCount > 0">
      <div class="ui right floated blue statistic">
        <div class="value">
          <i class="tasks icon"></i>
        </div>
        <div class="label">
          <strong>${allTodosCount}</strong>${allTodosCount === 1 ? ' task ': ' tasks '} 
        </div>
      </div>
      <div class="ui right floated green statistic">
        <div class="value">
          <i class="tasks icon"></i>
        </div>
        <div class="label">
          <strong>${activeTodosCount}</strong>${activeTodosCount === 1 ? ' task ': ' tasks '} left
        </div>
      </div>
      <div class="ui right floated red statistic">
        <div class="value">
          <i class="tasks icon"></i>
        </div>
        <div class="label">
          <strong>${completedTodosCount}</strong>${completedTodosCount === 1 ? ' task ': ' tasks '} completed
        </div>
      </div>
    </div>
    <br/><br/>    
    <div><br/><br/></div>
    <div class="ui floated right menu">
      <button class="ui icon negative button" disabled.bind="allTodosCount === 0" click.trigger="removeAllTodos()">
        <i class="remove icon"></i>
        Remove All
      </button>
      <button class="ui icon negative button" disabled.bind="completedTodosCount === 0" click.trigger="removeDoneTodos()">
        <i class="remove icon"></i>
        Remove Completed
      </button>
      <button class="ui icon blue button" disabled.bind="allTodosCount === 0" click.trigger="toggleAllTodos()">
        <i class="toggle on icon"></i>
        Toggle All
      </button>
      <button class="ui icon positive button" disabled.bind="allTodosCount === 0" click.trigger="completeAllTodos()">
        <i class="right checkmark icon"></i>
        Complete All
      </button>
    </div>
    <div>
      <br/><br/>
      <div class="ui relaxed divided list">
        <div class="item" repeat.for="t of filteredTodos">
          <raja-todo done.bind="t.done" description.bind="t.description"></raja-todo>
          <!--<compose if.bind="$odd" view-model="todo" view="todo.html" model.bind="t" dynamic-style="case.bind: oddItemCase; color.bind: oddItemColor; style.bind: oddItemStyle; fontWeight.bind: oddItemWeight"></compose>
          <compose if.bind="$even" view-model="todo" view="todo.html" model.bind="t" dynamic-style="case.bind: evenItemCase; color.bind: evenItemColor; style.bind: evenItemStyle; fontWeight.bind: evenItemWeight"></compose>-->
          <span class="ui floated right menu middle aligned">
          <button click.trigger="removeTodo(t)" class="ui primary button negative">
            <i class="icon remove"></i>Remove 
          </button>
          </span>
        </div>
      </div>
    </div>
  </div>
</template>


12.5 - observing-properties-in-viewmodel

app.ts
addTodo() {
    if(this.todoDescription) {
      const newTodoItem = new Todo( {done: false, description: this.todoDescription});
      this.observeItem(newTodoItem);
      this.todoService.addTodo(newTodoItem);
      this.todoDescription = "";
    }
    this.filterTodo(this.activeFilter);
  }

  observeItem(todoItem) {
    this.observerLocator.getObserver(todoItem, 'description')
      .subscribe((o, n) => this.onDescriptionChanged(todoItem));

    this.observerLocator.getObserver(todoItem, 'done')
      .subscribe((o, n) => this.onDoneChanged(todoItem));
  }

  onDescriptionChanged(todoItem) {
    if(todoItem.description === "") {
      this.removeTodo(todoItem);
      this.checkIfAllTodosAreCompleted();
    }
  }

  onDoneChanged(todoItem) {
    this.checkIfAllTodosAreCompleted();
    this.filterTodo(this.activeFilter);
  }

13-creating-custom-element-with-custom-events
au new 13-creating-custom-element-with-custom-events
todo.ts
import {inject, customElement, bindable} from 'aurelia-framework';

@customElement("todo")
@inject(Element)
export class Todo {
    @bindable id: number;
    @bindable done: boolean;
    @bindable description: string
    constructor(private element: Element){
      console.log(`Created Todo with ${this.done} ${this.description}`);
    }

    remove(){
      var event = new CustomEvent('remove', { 
        detail: {id: this.id, done: this.done, description: this.description},
        bubbles: true
      });
    
    this.element.dispatchEvent(event);
    }
}

todo.html
<template>
  <input type="checkbox" checked.bind="done">
  <span css="text-decoration: ${done ? 'line-through' : ''}">${description}</span>
  <button click.trigger="remove()">Remove Todo</button>
</template>

app.html
<todo if.bind="$odd"  done.bind="t.done" description.bind="t.description" dynamic-style="case.bind: oddItemCase; color.bind: oddItemColor; style.bind: oddItemStyle; fontWeight.bind: oddItemWeight"></todo>
<todo if.bind="$even"  done.bind="t.done" description.bind="t.description" dynamic-style="case.bind: evenItemCase; color.bind: evenItemColor; style.bind: evenItemStyle; fontWeight.bind: evenItemWeight"></todo>

app.ts
import {Todo} from "./resources/elements/todo";

export class App {
  heading = 'Todos';
  todos: any[] = [
    {id: 1, done:false, description: "Task 1" },
    {id: 2, done:false, description: "Task 2" }
  ]
  todoDescription: string;
  styleString: string = 'text-decoration: line-through;';
  styleObject: any = {
    'text-decoration': 'line-through'
  };

  getNextId() : number {
    return this.todos.length + 1;
  }
  addTodo() {
    if(this.todoDescription) {
      this.todos.push({id: this.getNextId(), done: false, description: this.todoDescription});
      this.todoDescription = "";
    }
  }

  removeTodo(todo: any) {
    console.log(`Removing ${todo.description} `);
    let index = this.todos.findIndex(t => t.id == todo.id);
    if(index !== -1) {
      this.todos.splice(index, 1);
    } 
  }
}

app.html
<template>
  <require from="./resources/elements/todo"></require>
  <h1>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <todo id="${t.id}" done="${t.done}" description="${t.description}" remove.delegate="removeTodo($event.detail)"></todo>
    </li>
  </ul>
</template>

14-nested-custom-elements
au new 14-nested-custom-elementss
au generate element todo-list

todo-list.ts
import {bindable} from 'aurelia-framework';
import {Todo} from "./todo";

export class TodoList {
  @bindable todos: any[];
  
  todosChanged(newTodos, oldTodos) {
    console.log(newTodos);
  }

  removeTodo(todo: any) {
    console.log(`Removing ${todo.description} `);
    let index = this.todos.findIndex(t => t.id == todo.id);
    if(index !== -1) {
      this.todos.splice(index, 1);
    } 
  }
}

todo-list.html
<template>
  <require from="./todo"></require>
  <ul>
    <li repeat.for="t of todos">
      <todo id.bind="t.id" done.bind="t.done" description.bind="t.description" remove.delegate="removeTodo($event.detail)"></todo>
    </li>
  </ul>
</template>

app.ts
import {Todo} from "./resources/elements/todo";

export class App {
  heading = 'Todos';
  todos: any[] = [
    {id: 1, done:false, description: "Task 1" },
    {id: 2, done:false, description: "Task 2" }
  ]
  todoDescription: string;
  styleString: string = 'text-decoration: line-through;';
  styleObject: any = {
    'text-decoration': 'line-through'
  };

  getNextId() : number {
    return this.todos.length + 1;
  }
  addTodo() {
    if(this.todoDescription) {
      this.todos.push({id: this.getNextId(), done: false, description: this.todoDescription});
      this.todoDescription = "";
    }
  }
}

app.html
import {Todo} from "./resources/elements/todo";

export class App {
  heading = 'Todos';
  todos: any[] = [
    {id: 1, done:false, description: "Task 1" },
    {id: 2, done:false, description: "Task 2" }
  ]
  todoDescription: string;
  styleString: string = 'text-decoration: line-through;';
  styleObject: any = {
    'text-decoration': 'line-through'
  };

  getNextId() : number {
    return this.todos.length + 1;
  }
  addTodo() {
    if(this.todoDescription) {
      this.todos.push({id: this.getNextId(), done: false, description: this.todoDescription});
      this.todoDescription = "";
    }
  }
}
