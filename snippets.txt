1-helloworld
npm install -g aurelia-cli
au new 1-helloworld
cd 1-helloworld
au run --watch

2-component
au new 2-component

todo.ts
export class Todo {
    constructor(private done: boolean, private description: string) {}
}

app.ts
import {Todo} from "./todo";

export class App {  
  todos: Todo[] = [
    new Todo(false, "Task 1"),
    new Todo(false, "Task 2")
  ];
}
app.html
<template>  
  <ul>
    <li repeat.for="todo of todos">
      <input type="checkbox" checked.bind="todo.done">
      <span>${todo.description}</span>      
    </li>
  </ul>
</template>


3-events
au new 3-events
app.ts
heading: string = "Todos";
todoDescription: string = "";

addTodo() {
    
	if(this.todoDescription) {
		this.todos.push(new Todo(false, this.todoDescription));
		this.todoDescription = "";
	}
}

removeTodo(todo) {
	let index = this.todos.indexOf(todo);
	if(index !== -1) {
		this.todos.splice(index, 1);
	}
}

app.html
<h1>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form> 

  <button click.trigger="removeTodo(todo)">Remove Todo</button>

4-class-style-binding
au new 4-class-style-binding

index.html
<style>
  body { font-family: Verdana, Arial; }
  .strikeout { text-decoration: line-through; }
  ul { padding-left: 0px; }
  li { list-style-type: none; } 
</style>

app.html
<span class.bind="t.done ? 'strikeout': ''">${t.description}</span>


app.ts
styleString: string = 'text-decoration: line-through;';
styleObject: any = {
'text-decoration': 'line-through'
};

app.html
<span style.bind="t.done ? styleString : ''">${t.description}</span>
<span css.bind="t.done ? styleString : ''">${t.description}</span>
<span style.bind="t.done ? ${styleObject}: ''">${t.description}</span>
<span css.bind="t.done ? ${styleObject}: ''">${t.description}</span>
<span css="text-decoration: ${t.done ? 'line-through': ''}">${t.description}</span>

5-binding-templating-composition
au new 5-binding-templating-composition

todo.ts
export class Todo {
    constructor(private done: boolean, private description: string){}
    activate(model: Todo) {
        this.done = model.done;
        this.description = model.description;
    }
}

todo.html
<template>
    <input type="checkbox" checked.bind="done">
    <span css="text-decoration: ${done ? 'line-through' : ''}">${description}</span>
</template>

todo-upper.html
<template>
    <input type="checkbox" checked.bind="done">
    <span css="text-decoration: ${done ? 'line-through' : ''}">${description.toUpperCase() }</span>
</template>

app.html notes: using view in <compose> is optional if a view with the same name as viewmodel (with .html extension) is defined. You can use another view by
providing the path to the .html file as the value of "view" attribute.

app.html
<template>  
  <h1>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <compose view-model="todo" view="todo-upper.html"  model.bind="t"></compose>
      <button click.trigger="removeTodo(t)">Remove Todo</button>
    </li>
  </ul>
</template>

6-custom-attribute
au new 6-custom-attribute
au generate attribute upper-case
upper-case.ts
import {autoinject} from 'aurelia-framework';

@autoinject()
export class UpperCaseCustomAttribute {
  constructor(private element: Element) {
    this.element.style.textTransform = "uppercase";
    this.element.style.backgroundColor = "red";
  }

  valueChanged(newValue, oldValue) {

  }
}

app.html
<template>
  <require from="./resources/attributes/upper-case"></require>
  <h1 upper-case>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <compose view-model="todo" view="todo.html" model.bind="t" upper-case></compose>
      <button click.trigger="removeTodo(t)">Remove Todo</button>
    </li>
  </ul>
</template>

7-custom-attribute-single-value-binding
case.ts
import {autoinject} from 'aurelia-framework';

@autoinject()
export class CaseCustomAttribute {
  constructor(private element: Element) { }

  valueChanged(newValue, oldValue) {
    this.element.style.textTransform = newValue;
  }
}

app.html
<template>
  <require from="./resources/attributes/upper-case"></require>
  <require from="./resources/attributes/case"></require>
  <h1 case"uppercase">${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <compose view-model="todo" view="todo.html" model.bind="t" case="${$odd ? 'uppercase' : 'lowercase'}"></compose>
      <button click.trigger="removeTodo(t)">Remove Todo</button>
    </li>
  </ul>
</template>

8-custom-attribute-options-binding
case-color.ts
import {bindable, autoinject} from 'aurelia-framework';

@autoinject()
export class CaseColorCustomAttribute {
  @bindable case : string;
  @bindable color : string;
  constructor(private element: Element) { }

  caseChanged(newCase: string, oldCase: string) {
    this.element.style.textTransform = newCase;
  }

  colorChanged(newColor: string, oldColor: string) {
    this.element.style.color = newColor;
  }
}

app.ts
import {Todo} from "./todo";

export class App {
  heading = 'Todos';
  todos: Todo[] = [
    new Todo(false, "Task 1"),
    new Todo(true, "Task 2")
  ]
  todoDescription: string;
  styleString: string = 'text-decoration: line-through;';
  styleObject: any = {
    'text-decoration': 'line-through'
  };

  oddItemCase: string = "uppercase";
  oddItemColor: string = "red";
  evenItemCase: string = "lowercase";
  evenItemColor: string = "green";
  addTodo() {
    if(this.todoDescription) {
      this.todos.push(new Todo(false, this.todoDescription));
      this.todoDescription = "";
    }
  }

  removeTodo(todo: Todo) {
    let index = this.todos.indexOf(todo);
    if(index !== -1) {
      this.todos.splice(index, 1);
    } 
  }
}

app.html
<template>
  <require from="./resources/attributes/upper-case"></require>
  <require from="./resources/attributes/case"></require>
  <require from="./resources/attributes/case-color"></require>
  <h1>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <compose if.bind="$odd" view-model="todo" view="todo.html" model.bind="t" case-color="case.bind: oddItemCase; color.bind: oddItemColor"></compose>
      <compose if.bind="$even" view-model="todo" view="todo.html" model.bind="t" case-color="case.bind: evenItemCase; color.bind: evenItemColor"></compose>
      <button click.trigger="removeTodo(t)">Remove Todo</button>
    </li>
  </ul>
</template>

9-custom-attribute-dynamic-options-binding
dynamic-style.ts
import {dynamicOptions, autoinject} from 'aurelia-framework';

@dynamicOptions
@autoinject()
export class DynamicStyleCustomAttribute {
  constructor(private element: Element) { }

  propertyChanged(name: string, newValue: string, oldValue: string) {
    switch(name) {
      case "case":
        this.element.style.textTransform = newValue;
        break;
      case "color":
        this.element.style.color = newValue;
        break;
      case "style":
        this.element.style.fontStyle = newValue;
        break;
      default:
        this.element.style[`${name}`] = newValue;
        break;
    }
  }
}

app.ts
  oddItemStyle: string = "oblique";
  oddItemWeight: string = "bold";
  
  evenItemStyle: string = "italic";
  evenItemWeight: string = "lighter";

10-custom-element
au new 10-custom-element
au generate element todo

todo-hoce.html
<template bindable="done, description">
  <input type="checkbox" checked.bind="done">
  <span css="text-decoration: ${ done ? 'line-through' : '' }">${description}</span>
</template>

app.html
<require from="./todo-hoce.html"></require>

<todo-hoce done.bind="t.done" description.bind="t.description"></todo-hoce>

todo.ts
@bindable private done: boolean;
@bindable private description: string
constructor(done: boolean, description: string){
        this.done = done;
        this.description = description;
    }

app.html
<require from="./todo"></require>

<todo></todo>

todo.ts
import {inject, customElement, bindable} from 'aurelia-framework';

@customElement("todo")
@inject(Element)
export class Todo {
    @bindable id: number;
    @bindable done: boolean;
    @bindable description: string
    constructor(private element: Element){
      console.log(`Created Todo with ${this.done} ${this.description}`);
    }

    remove(){
      var event = new CustomEvent('remove', { 
        detail: {id: this.id, done: this.done, description: this.description},
        bubbles: true
      });
    
    this.element.dispatchEvent(event);
    }
}

todo.html
<template>
  <input type="checkbox" checked.bind="done">
  <span css="text-decoration: ${done ? 'line-through' : ''}">${description}</span>
  <button click.trigger="remove()">Remove Todo</button>
</template>

app.html
<todo if.bind="$odd"  done.bind="t.done" description.bind="t.description" dynamic-style="case.bind: oddItemCase; color.bind: oddItemColor; style.bind: oddItemStyle; fontWeight.bind: oddItemWeight"></todo>
<todo if.bind="$even"  done.bind="t.done" description.bind="t.description" dynamic-style="case.bind: evenItemCase; color.bind: evenItemColor; style.bind: evenItemStyle; fontWeight.bind: evenItemWeight"></todo>

app.ts
import {Todo} from "./resources/elements/todo";

export class App {
  heading = 'Todos';
  todos: any[] = [
    {id: 1, done:false, description: "Task 1" },
    {id: 2, done:false, description: "Task 2" }
  ]
  todoDescription: string;
  styleString: string = 'text-decoration: line-through;';
  styleObject: any = {
    'text-decoration': 'line-through'
  };

  getNextId() : number {
    return this.todos.length + 1;
  }
  addTodo() {
    if(this.todoDescription) {
      this.todos.push({id: this.getNextId(), done: false, description: this.todoDescription});
      this.todoDescription = "";
    }
  }

  removeTodo(todo: any) {
    console.log(`Removing ${todo.description} `);
    let index = this.todos.findIndex(t => t.id == todo.id);
    if(index !== -1) {
      this.todos.splice(index, 1);
    } 
  }
}

app.html
<template>
  <require from="./resources/elements/todo"></require>
  <h1>${heading}</h1>
  <form submit.trigger="addTodo()">
    <input type="text" value.bind="todoDescription">
    <button type="submit">Add Todo</button>
  </form>

  <ul>
    <li repeat.for="t of todos">
      <todo id="${t.id}" done="${t.done}" description="${t.description}" remove.delegate="removeTodo($event.detail)"></todo>
    </li>
  </ul>
</template>

10-nested-custom-elements
au new 10-nested-custom-elementss
au generate element todo-list

todo-list.ts
import {bindable} from 'aurelia-framework';
import {Todo} from "./todo";

export class TodoList {
  @bindable todos: any[];
  
  todosChanged(newTodos, oldTodos) {
    console.log(newTodos);
  }

  removeTodo(todo: any) {
    console.log(`Removing ${todo.description} `);
    let index = this.todos.findIndex(t => t.id == todo.id);
    if(index !== -1) {
      this.todos.splice(index, 1);
    } 
  }
}

todo-list.html
<template>
  <require from="./todo"></require>
  <ul>
    <li repeat.for="t of todos">
      <todo id.bind="t.id" done.bind="t.done" description.bind="t.description" remove.delegate="removeTodo($event.detail)"></todo>
    </li>
  </ul>
</template>

app.ts
import {Todo} from "./resources/elements/todo";

export class App {
  heading = 'Todos';
  todos: any[] = [
    {id: 1, done:false, description: "Task 1" },
    {id: 2, done:false, description: "Task 2" }
  ]
  todoDescription: string;
  styleString: string = 'text-decoration: line-through;';
  styleObject: any = {
    'text-decoration': 'line-through'
  };

  getNextId() : number {
    return this.todos.length + 1;
  }
  addTodo() {
    if(this.todoDescription) {
      this.todos.push({id: this.getNextId(), done: false, description: this.todoDescription});
      this.todoDescription = "";
    }
  }
}

app.html
import {Todo} from "./resources/elements/todo";

export class App {
  heading = 'Todos';
  todos: any[] = [
    {id: 1, done:false, description: "Task 1" },
    {id: 2, done:false, description: "Task 2" }
  ]
  todoDescription: string;
  styleString: string = 'text-decoration: line-through;';
  styleObject: any = {
    'text-decoration': 'line-through'
  };

  getNextId() : number {
    return this.todos.length + 1;
  }
  addTodo() {
    if(this.todoDescription) {
      this.todos.push({id: this.getNextId(), done: false, description: this.todoDescription});
      this.todoDescription = "";
    }
  }
}
